{"cells":[{"cell_type":"code","source":["import pandas as pd\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.model_selection import train_test_split\n","\n","data_sudah_diinput = False\n","\n","\n","data[\"Temperature\"].fillna(data[\"Temperature\"].median(), inplace=True)\n","data[\"Humidity\"].fillna(data[\"Humidity\"].median(), inplace=True)\n","data[\"PM2.5\"].fillna(data[\"PM2.5\"].median(), inplace=True)\n","data[\"PM10\"].fillna(data[\"PM10\"].median(), inplace=True)\n","data[\"NO2\"].fillna(data[\"NO2\"].median(), inplace=True)\n","data[\"SO2\"].fillna(data[\"SO2\"].median(), inplace=True)\n","data[\"CO\"].fillna(data[\"CO\"].median(), inplace=True)\n","data[\"Proximity_to_Industrial_Areas\"].fillna(data[\"Proximity_to_Industrial_Areas\"].median(), inplace=True)\n","data[\"Population_Density\"].fillna(data[\"Population_Density\"].median(), inplace=True)\n","\n","\n","data[\"Air Quality\"].fillna(data[\"Air Quality\"].mode()[0], inplace=True)\n","\n","def pohon_keputusan(data, fitur, target):\n","  \"\"\"\n","  Fungsi untuk mengolah data dengan algoritma pohon keputusan.\n","\n","  Args:\n","    data: DataFrame pandas yang berisi data.\n","    fitur: List nama kolom fitur.\n","    target: Nama kolom target.\n","\n","  Returns:\n","    Akurasi model.\n","  \"\"\"\n","  X = data[fitur]\n","  y = data[target]\n","  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","  model = DecisionTreeClassifier(random_state=42)\n","\n","  model.fit(X_train, y_train)\n","\n","  y_pred = model.predict(X_test)\n","\n","  akurasi = accuracy_score(y_test, y_pred)\n","\n","  return akurasi\n","\n","def Jaringan_Syaraf(data, fitur, target):\n","    \"\"\"\n","    Fungsi untuk mengolah data dengan algoritma Multilayer Perceptron (MLP).\n","\n","    Args:\n","        data: DataFrame pandas yang berisi data.\n","        fitur: List nama kolom fitur.\n","        target: Nama kolom target.\n","\n","    Returns:\n","        Akurasi model.\n","    \"\"\"\n","    X = data[fitur]\n","    y = data[target]\n","    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","    scaler = StandardScaler()\n","    X_train = scaler.fit_transform(X_train)\n","    X_test = scaler.transform(X_test)\n","\n","    model = MLPClassifier(hidden_layer_sizes=(100, 50),\n","                        activation='relu',\n","                        solver='adam',\n","                        max_iter=200,\n","                        random_state=42)\n","\n","    model.fit(X_train, y_train)\n","\n","    y_pred = model.predict(X_test)\n","\n","    akurasi = accuracy_score(y_test, y_pred)\n","\n","    return akurasi\n","\n","\n","\n","def display_data():\n","  global data_sudah_diinput\n","  if data_sudah_diinput:\n","    print(data_sudah_diinput)\n","  else:\n","    print(\"Anda harus menginputkan data terlebih dahulu melalui menu 'Input bahan'.\")\n","\n","def menu_bahan():\n","  global data_sudah_diinput\n","  File = input(\"Masukkan file: \")\n","  fitur_str = input(\"Masukkan fitur (pisahkan dengan koma): \")\n","  algoritma = input(\"Masukkan algoritma: \")\n","  fitur = [f.strip() for f in fitur_str.split(',')]\n","  data_sudah_diinput = True\n","  return File, fitur, algoritma\n","\n","def Analisis_data(algoritma, fitur):\n","  if algoritma == \"Pohon Keputusan\":\n","    target = 'Air Quality'\n","    pohon_keputusan(data_sudah_diinput, fitur, target)\n","  elif algoritma == \"Jaringan Syaraf\":\n","    target = 'Air Quality'\n","    Jaringan_Syaraf(data_sudah_diinput, fitur, target)\n","\n","def menu_utama():\n","  print(\"========== Menu Utama ==========\")\n","  print(\"1. Tampilkan Data\")\n","  print(\"2. Input bahan\")\n","  print(\"3. Analisis Data\")\n","  print(\"4. Keluar\")\n","  pilihan = input(\"Masukkan pilihan: \")\n","  return pilihan\n","\n","fitur = []\n","algoritma = \"\"\n","\n","while True:\n","  pilihan = menu_utama()\n","  if pilihan == \"1\":\n","    display_data()\n","  elif pilihan == \"2\":\n","    print(\"Hanya ada file air_quality.xlsx\")\n","    print(\" \")\n","    print(\"fitur fitur: \")\n","    print(\"1. Temperature\")\n","    print(\"1. Humidity\")\n","    print(\"1. PM2.5\")\n","    print(\"1. PM10\")\n","    print(\"1. NO2\")\n","    print(\"1. SO2\")\n","    print(\"1. CO\")\n","    print(\"1. Proximity_to_Industrial_Areas\")\n","    print(\"1. Population_Density\")\n","    print(\" \")\n","    print(\"Algoritma: \")\n","    print(\"1. Pohon Keputusan\")\n","    print(\"2. Jaringan Syaraf\")\n","    File, fitur_baru, algoritma = menu_bahan()\n","    fitur = fitur_baru\n","    algoritma = algoritma\n","  elif pilihan == \"3\":\n","    print(Analisis_data(algoritma, fitur))\n","  elif pilihan == \"4\":\n","    break\n","  else:\n","    print(\"Pilihan tidak valid\")"],"metadata":{"id":"7XGvsrkUk5hM","outputId":"99033a56-f52f-4095-9b9e-0e99359bd498","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-91-edb81ee53e43>:19: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data[\"Temperature\"].fillna(data[\"Temperature\"].median(), inplace=True)\n","<ipython-input-91-edb81ee53e43>:20: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data[\"Humidity\"].fillna(data[\"Humidity\"].median(), inplace=True)\n","<ipython-input-91-edb81ee53e43>:21: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data[\"PM2.5\"].fillna(data[\"PM2.5\"].median(), inplace=True)\n","<ipython-input-91-edb81ee53e43>:22: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data[\"PM10\"].fillna(data[\"PM10\"].median(), inplace=True)\n","<ipython-input-91-edb81ee53e43>:23: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data[\"NO2\"].fillna(data[\"NO2\"].median(), inplace=True)\n","<ipython-input-91-edb81ee53e43>:24: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data[\"SO2\"].fillna(data[\"SO2\"].median(), inplace=True)\n","<ipython-input-91-edb81ee53e43>:25: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data[\"CO\"].fillna(data[\"CO\"].median(), inplace=True)\n","<ipython-input-91-edb81ee53e43>:26: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data[\"Proximity_to_Industrial_Areas\"].fillna(data[\"Proximity_to_Industrial_Areas\"].median(), inplace=True)\n","<ipython-input-91-edb81ee53e43>:27: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data[\"Population_Density\"].fillna(data[\"Population_Density\"].median(), inplace=True)\n"]},{"output_type":"stream","name":"stdout","text":["========== Menu Utama ==========\n","1. Tampilkan Data\n","2. Input bahan\n","3. Analisis Data\n","4. Keluar\n","Masukkan pilihan: 1\n","Anda harus menginputkan data terlebih dahulu melalui menu 'Input bahan'.\n","========== Menu Utama ==========\n","1. Tampilkan Data\n","2. Input bahan\n","3. Analisis Data\n","4. Keluar\n","Masukkan pilihan: 2\n","Masukkan file: air_quality.xlsx\n","Masukkan fitur (pisahkan dengan koma): Temperatur, Humadity, NO2, SO2\n","Masukkan algoritma: Pohon keputusan\n","========== Menu Utama ==========\n","1. Tampilkan Data\n","2. Input bahan\n","3. Analisis Data\n","4. Keluar\n","Masukkan pilihan: 3\n","None\n","========== Menu Utama ==========\n","1. Tampilkan Data\n","2. Input bahan\n","3. Analisis Data\n","4. Keluar\n"]}]}],"metadata":{"colab":{"name":"Welcome To Colab","provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1734158160530}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}